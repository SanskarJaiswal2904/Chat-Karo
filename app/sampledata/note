XML:-
        overscroll mode = when we scroll all the way to down it will go up with the view
        clipToPadding= Now if you were to set clipToPadding="false" instead of just being applied normally
                           to the entire view it only applies the padding to the end items, this is what you'd
                            see in the same scenario:
        ime option: the next button in the keyboard
        important for autofill: store text for auto fill
        Content  Description: while holding the icon what text shall be shown

Firebase:-
        exception.getMessage() -> will get the readable layman exception


MultiDex:-
        Android app (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files,
        which contain the compiled code used to run your app. The Dalvik Executable specification limits the
        total number of methods that can be referenced within a single DEX file to 65,536â€”including Android framework
        methods, library methods, and methods in your own code

Image Selection and Resizing:-
        This code appears to be part of an Android application written in Java or Kotlin. Let's break down the two methods:

        1. **`encodeImage` Method:**
           - Takes a `Bitmap` as a parameter.
           - Resizes the input bitmap to a preview size with a maximum width of 150 pixels while maintaining the aspect ratio.
           - Compresses the resized bitmap into a JPEG format with a quality of 50%.
           - Converts the compressed image into a Base64-encoded string using the `Base64.encodeToString` method.
           - Returns the Base64-encoded string.

        2. **`pickImage` Method:**
           - Defines an `ActivityResultLauncher` named `pickImage`. This launcher is used to handle the result of an activity started for picking an image.
           - The launcher is registered using the `registerForActivityResult` method with `StartActivityForResult` contract.
           - In the callback (`result`), it checks if the result code is `RESULT_OK` (indicating that the image selection was successful).
           - If successful, it retrieves the selected image's URI from the result data and attempts to open an `InputStream` from that URI.
           - If the `InputStream` is successfully opened, it decodes the stream into a `Bitmap` using `BitmapFactory.decodeStream`.
           - The decoded bitmap is then set to be displayed in an `ImageView` named `imageProfile` (assuming that `binding` refers to a data-binding object associated with the layout).
           - If there are any issues, such as a `FileNotFoundException`, the exception is caught and printed to the console.

        This code seems to be part of an image selection functionality in an Android app. The `pickImage` method is likely to be triggered
        when the user wants to select an image, and it handles the result by decoding the selected image and displaying it in an `ImageView`.
        The `encodeImage` method is used to encode a `Bitmap` into a Base64 string, which might be useful for further processing or transmission.

Intent :-
        FLAG_ACTIVITY_NEW_TASK: This flag is used to start the activity in a new task. If this flag is set,
        and the activity is not already running in the current task or any of its ancestor tasks, a new task will be created to host the activity.

        FLAG_ACTIVITY_CLEAR_TASK: This flag is used in conjunction with FLAG_ACTIVITY_NEW_TASK. If both flags are set,
        and the activity is already running in a task, that task and all of its activities will be cleared before
        launching the new activity.
